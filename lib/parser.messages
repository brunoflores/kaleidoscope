prog: TIMES
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN TIMES
##
## Ends in an error in state: 1.
##
## exp -> LPAREN . exp RPAREN [ TIMES THEN RPAREN PLUS MINUS LPAREN LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID LPAREN TIMES
##
## Ends in an error in state: 4.
##
## exp -> ID LPAREN . exprlist RPAREN [ TIMES THEN RPAREN PLUS MINUS LPAREN LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF TIMES
##
## Ends in an error in state: 5.
##
## closedexp -> IF . eitherexp THEN closedexp ELSE closedexp [ THEN RPAREN LPAREN INT IF ID EOF ELSE DEF COMMA ]
## openexp -> IF . eitherexp THEN exp [ THEN RPAREN LPAREN INT IF ID EOF DEF COMMA ]
## openexp -> IF . eitherexp THEN openexp [ THEN RPAREN LPAREN INT IF ID EOF DEF COMMA ]
## openexp -> IF . eitherexp THEN closedexp ELSE openexp [ THEN RPAREN LPAREN INT IF ID EOF DEF COMMA ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INT TIMES TIMES
##
## Ends in an error in state: 9.
##
## binop -> exp TIMES . exp [ TIMES THEN RPAREN PLUS MINUS LPAREN LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## exp TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INT PLUS TIMES
##
## Ends in an error in state: 13.
##
## binop -> exp PLUS . exp [ TIMES THEN RPAREN PLUS MINUS LPAREN LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## exp PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INT MINUS TIMES
##
## Ends in an error in state: 15.
##
## binop -> exp MINUS . exp [ TIMES THEN RPAREN PLUS MINUS LPAREN LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## exp MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INT LESSTHAN TIMES
##
## Ends in an error in state: 17.
##
## binop -> exp LESSTHAN . exp [ TIMES THEN RPAREN PLUS MINUS LPAREN LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## exp LESSTHAN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF INT RPAREN
##
## Ends in an error in state: 19.
##
## closedexp -> IF eitherexp . THEN closedexp ELSE closedexp [ THEN RPAREN LPAREN INT IF ID EOF ELSE DEF COMMA ]
## openexp -> IF eitherexp . THEN exp [ THEN RPAREN LPAREN INT IF ID EOF DEF COMMA ]
## openexp -> IF eitherexp . THEN openexp [ THEN RPAREN LPAREN INT IF ID EOF DEF COMMA ]
## openexp -> IF eitherexp . THEN closedexp ELSE openexp [ THEN RPAREN LPAREN INT IF ID EOF DEF COMMA ]
##
## The known suffix of the stack is as follows:
## IF eitherexp
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production closedexp -> exp
## In state 27, spurious reduction of production eitherexp -> closedexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF INT THEN TIMES
##
## Ends in an error in state: 20.
##
## closedexp -> IF eitherexp THEN . closedexp ELSE closedexp [ THEN RPAREN LPAREN INT IF ID EOF ELSE DEF COMMA ]
## openexp -> IF eitherexp THEN . exp [ THEN RPAREN LPAREN INT IF ID EOF DEF COMMA ]
## openexp -> IF eitherexp THEN . openexp [ THEN RPAREN LPAREN INT IF ID EOF DEF COMMA ]
## openexp -> IF eitherexp THEN . closedexp ELSE openexp [ THEN RPAREN LPAREN INT IF ID EOF DEF COMMA ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF INT THEN IF INT THEN INT ELSE INT THEN
##
## Ends in an error in state: 23.
##
## closedexp -> IF eitherexp THEN closedexp . ELSE closedexp [ THEN RPAREN LPAREN INT IF ID EOF ELSE DEF COMMA ]
## openexp -> IF eitherexp THEN closedexp . ELSE openexp [ THEN RPAREN LPAREN INT IF ID EOF DEF COMMA ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN closedexp
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production closedexp -> exp
## In state 26, spurious reduction of production closedexp -> IF eitherexp THEN closedexp ELSE closedexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF INT THEN INT ELSE TIMES
##
## Ends in an error in state: 24.
##
## closedexp -> IF eitherexp THEN closedexp ELSE . closedexp [ THEN RPAREN LPAREN INT IF ID EOF ELSE DEF COMMA ]
## openexp -> IF eitherexp THEN closedexp ELSE . openexp [ THEN RPAREN LPAREN INT IF ID EOF DEF COMMA ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN closedexp ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID LPAREN INT THEN
##
## Ends in an error in state: 32.
##
## separated_nonempty_list(COMMA,eitherexp) -> eitherexp . [ RPAREN ]
## separated_nonempty_list(COMMA,eitherexp) -> eitherexp . COMMA separated_nonempty_list(COMMA,eitherexp) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## eitherexp
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production closedexp -> exp
## In state 27, spurious reduction of production eitherexp -> closedexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID LPAREN INT COMMA TIMES
##
## Ends in an error in state: 33.
##
## separated_nonempty_list(COMMA,eitherexp) -> eitherexp COMMA . separated_nonempty_list(COMMA,eitherexp) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## eitherexp COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN INT THEN
##
## Ends in an error in state: 35.
##
## binop -> exp . LESSTHAN exp [ TIMES RPAREN PLUS MINUS LESSTHAN ]
## binop -> exp . PLUS exp [ TIMES RPAREN PLUS MINUS LESSTHAN ]
## binop -> exp . MINUS exp [ TIMES RPAREN PLUS MINUS LESSTHAN ]
## binop -> exp . TIMES exp [ TIMES RPAREN PLUS MINUS LESSTHAN ]
## exp -> LPAREN exp . RPAREN [ TIMES THEN RPAREN PLUS MINUS LPAREN LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF TIMES
##
## Ends in an error in state: 37.
##
## dec -> DEF . ID LPAREN loption(separated_nonempty_list(COMMA,ID)) RPAREN closedexp [ LPAREN INT IF ID EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID TIMES
##
## Ends in an error in state: 38.
##
## dec -> DEF ID . LPAREN loption(separated_nonempty_list(COMMA,ID)) RPAREN closedexp [ LPAREN INT IF ID EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN TIMES
##
## Ends in an error in state: 39.
##
## dec -> DEF ID LPAREN . loption(separated_nonempty_list(COMMA,ID)) RPAREN closedexp [ LPAREN INT IF ID EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN ID TIMES
##
## Ends in an error in state: 40.
##
## separated_nonempty_list(COMMA,ID) -> ID . [ RPAREN ]
## separated_nonempty_list(COMMA,ID) -> ID . COMMA separated_nonempty_list(COMMA,ID) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN ID COMMA TIMES
##
## Ends in an error in state: 41.
##
## separated_nonempty_list(COMMA,ID) -> ID COMMA . separated_nonempty_list(COMMA,ID) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## ID COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN RPAREN TIMES
##
## Ends in an error in state: 45.
##
## dec -> DEF ID LPAREN loption(separated_nonempty_list(COMMA,ID)) RPAREN . closedexp [ LPAREN INT IF ID EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ID LPAREN loption(separated_nonempty_list(COMMA,ID)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN RPAREN IF TIMES
##
## Ends in an error in state: 46.
##
## closedexp -> IF . eitherexp THEN closedexp ELSE closedexp [ LPAREN INT IF ID EOF ELSE DEF ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN RPAREN IF INT RPAREN
##
## Ends in an error in state: 47.
##
## closedexp -> IF eitherexp . THEN closedexp ELSE closedexp [ LPAREN INT IF ID EOF ELSE DEF ]
##
## The known suffix of the stack is as follows:
## IF eitherexp
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production closedexp -> exp
## In state 27, spurious reduction of production eitherexp -> closedexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN RPAREN IF INT THEN TIMES
##
## Ends in an error in state: 48.
##
## closedexp -> IF eitherexp THEN . closedexp ELSE closedexp [ LPAREN INT IF ID EOF ELSE DEF ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN RPAREN IF INT THEN INT THEN
##
## Ends in an error in state: 49.
##
## closedexp -> IF eitherexp THEN closedexp . ELSE closedexp [ LPAREN INT IF ID EOF ELSE DEF ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN closedexp
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production closedexp -> exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN RPAREN IF INT THEN INT ELSE TIMES
##
## Ends in an error in state: 50.
##
## closedexp -> IF eitherexp THEN closedexp ELSE . closedexp [ LPAREN INT IF ID EOF ELSE DEF ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN closedexp ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INT THEN
##
## Ends in an error in state: 52.
##
## list(top) -> top . list(top) [ EOF ]
##
## The known suffix of the stack is as follows:
## top
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 8, spurious reduction of production closedexp -> exp
## In state 27, spurious reduction of production eitherexp -> closedexp
## In state 54, spurious reduction of production top -> eitherexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

