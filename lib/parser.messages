prog: THEN
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF THEN
##
## Ends in an error in state: 2.
##
## closedexp -> IF . eitherexp THEN closedexp ELSE closedexp [ THEN RPAREN INT IF ID EOF ELSE DEF COMMA ]
## openexp -> IF . eitherexp THEN exp [ THEN RPAREN INT IF ID EOF DEF COMMA ]
## openexp -> IF . eitherexp THEN openexp [ THEN RPAREN INT IF ID EOF DEF COMMA ]
## openexp -> IF . eitherexp THEN closedexp ELSE openexp [ THEN RPAREN INT IF ID EOF DEF COMMA ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID EXTERN
##
## Ends in an error in state: 3.
##
## exp -> ID . LPAREN exprlist RPAREN [ THEN RPAREN PLUS MINUS LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
## lvalue -> ID . [ THEN RPAREN PLUS MINUS LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID LPAREN THEN
##
## Ends in an error in state: 4.
##
## exp -> ID LPAREN . exprlist RPAREN [ THEN RPAREN PLUS MINUS LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INT LPAREN
##
## Ends in an error in state: 11.
##
## binop -> exp . LESSTHAN exp [ THEN RPAREN PLUS MINUS LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
## binop -> exp . PLUS exp [ THEN RPAREN PLUS MINUS LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
## binop -> exp . MINUS exp [ THEN RPAREN PLUS MINUS LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
## closedexp -> exp . [ THEN RPAREN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INT PLUS THEN
##
## Ends in an error in state: 12.
##
## binop -> exp PLUS . exp [ THEN RPAREN PLUS MINUS LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## exp PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INT MINUS THEN
##
## Ends in an error in state: 16.
##
## binop -> exp MINUS . exp [ THEN RPAREN PLUS MINUS LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## exp MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INT LESSTHAN THEN
##
## Ends in an error in state: 18.
##
## binop -> exp LESSTHAN . exp [ THEN RPAREN PLUS MINUS LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
##
## The known suffix of the stack is as follows:
## exp LESSTHAN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID LPAREN INT THEN
##
## Ends in an error in state: 20.
##
## separated_nonempty_list(COMMA,eitherexp) -> eitherexp . [ RPAREN ]
## separated_nonempty_list(COMMA,eitherexp) -> eitherexp . COMMA separated_nonempty_list(COMMA,eitherexp) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## eitherexp
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 11, spurious reduction of production closedexp -> exp
## In state 23, spurious reduction of production eitherexp -> closedexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID LPAREN INT COMMA THEN
##
## Ends in an error in state: 21.
##
## separated_nonempty_list(COMMA,eitherexp) -> eitherexp COMMA . separated_nonempty_list(COMMA,eitherexp) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## eitherexp COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF INT RPAREN
##
## Ends in an error in state: 24.
##
## closedexp -> IF eitherexp . THEN closedexp ELSE closedexp [ THEN RPAREN INT IF ID EOF ELSE DEF COMMA ]
## openexp -> IF eitherexp . THEN exp [ THEN RPAREN INT IF ID EOF DEF COMMA ]
## openexp -> IF eitherexp . THEN openexp [ THEN RPAREN INT IF ID EOF DEF COMMA ]
## openexp -> IF eitherexp . THEN closedexp ELSE openexp [ THEN RPAREN INT IF ID EOF DEF COMMA ]
##
## The known suffix of the stack is as follows:
## IF eitherexp
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 11, spurious reduction of production closedexp -> exp
## In state 23, spurious reduction of production eitherexp -> closedexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF INT THEN THEN
##
## Ends in an error in state: 25.
##
## closedexp -> IF eitherexp THEN . closedexp ELSE closedexp [ THEN RPAREN INT IF ID EOF ELSE DEF COMMA ]
## openexp -> IF eitherexp THEN . exp [ THEN RPAREN INT IF ID EOF DEF COMMA ]
## openexp -> IF eitherexp THEN . openexp [ THEN RPAREN INT IF ID EOF DEF COMMA ]
## openexp -> IF eitherexp THEN . closedexp ELSE openexp [ THEN RPAREN INT IF ID EOF DEF COMMA ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF INT THEN INT LPAREN
##
## Ends in an error in state: 27.
##
## binop -> exp . LESSTHAN exp [ THEN RPAREN PLUS MINUS LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
## binop -> exp . PLUS exp [ THEN RPAREN PLUS MINUS LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
## binop -> exp . MINUS exp [ THEN RPAREN PLUS MINUS LESSTHAN INT IF ID EOF ELSE DEF COMMA ]
## closedexp -> exp . [ ELSE ]
## openexp -> IF eitherexp THEN exp . [ THEN RPAREN INT IF ID EOF DEF COMMA ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF INT THEN IF INT THEN INT ELSE INT THEN
##
## Ends in an error in state: 28.
##
## closedexp -> IF eitherexp THEN closedexp . ELSE closedexp [ THEN RPAREN INT IF ID EOF ELSE DEF COMMA ]
## openexp -> IF eitherexp THEN closedexp . ELSE openexp [ THEN RPAREN INT IF ID EOF DEF COMMA ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN closedexp
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 11, spurious reduction of production closedexp -> exp
## In state 31, spurious reduction of production closedexp -> IF eitherexp THEN closedexp ELSE closedexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF INT THEN INT ELSE THEN
##
## Ends in an error in state: 29.
##
## closedexp -> IF eitherexp THEN closedexp ELSE . closedexp [ THEN RPAREN INT IF ID EOF ELSE DEF COMMA ]
## openexp -> IF eitherexp THEN closedexp ELSE . openexp [ THEN RPAREN INT IF ID EOF DEF COMMA ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN closedexp ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF THEN
##
## Ends in an error in state: 32.
##
## dec -> DEF . ID LPAREN ID RPAREN closedexp [ INT IF ID EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID THEN
##
## Ends in an error in state: 33.
##
## dec -> DEF ID . LPAREN ID RPAREN closedexp [ INT IF ID EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN THEN
##
## Ends in an error in state: 34.
##
## dec -> DEF ID LPAREN . ID RPAREN closedexp [ INT IF ID EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN ID THEN
##
## Ends in an error in state: 35.
##
## dec -> DEF ID LPAREN ID . RPAREN closedexp [ INT IF ID EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ID LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN ID RPAREN THEN
##
## Ends in an error in state: 36.
##
## dec -> DEF ID LPAREN ID RPAREN . closedexp [ INT IF ID EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ID LPAREN ID RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN ID RPAREN IF THEN
##
## Ends in an error in state: 37.
##
## closedexp -> IF . eitherexp THEN closedexp ELSE closedexp [ INT IF ID EOF ELSE DEF ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN ID RPAREN IF INT RPAREN
##
## Ends in an error in state: 38.
##
## closedexp -> IF eitherexp . THEN closedexp ELSE closedexp [ INT IF ID EOF ELSE DEF ]
##
## The known suffix of the stack is as follows:
## IF eitherexp
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 11, spurious reduction of production closedexp -> exp
## In state 23, spurious reduction of production eitherexp -> closedexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN ID RPAREN IF INT THEN THEN
##
## Ends in an error in state: 39.
##
## closedexp -> IF eitherexp THEN . closedexp ELSE closedexp [ INT IF ID EOF ELSE DEF ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN ID RPAREN IF INT THEN INT THEN
##
## Ends in an error in state: 40.
##
## closedexp -> IF eitherexp THEN closedexp . ELSE closedexp [ INT IF ID EOF ELSE DEF ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN closedexp
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 11, spurious reduction of production closedexp -> exp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEF ID LPAREN ID RPAREN IF INT THEN INT ELSE THEN
##
## Ends in an error in state: 41.
##
## closedexp -> IF eitherexp THEN closedexp ELSE . closedexp [ INT IF ID EOF ELSE DEF ]
##
## The known suffix of the stack is as follows:
## IF eitherexp THEN closedexp ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INT THEN
##
## Ends in an error in state: 43.
##
## list(top) -> top . list(top) [ EOF ]
##
## The known suffix of the stack is as follows:
## top
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 11, spurious reduction of production closedexp -> exp
## In state 23, spurious reduction of production eitherexp -> closedexp
## In state 45, spurious reduction of production top -> eitherexp
##

<YOUR SYNTAX ERROR MESSAGE HERE>

